{"messages":[{"role":"system","content":"You are a python programmer that specializes in writing animation code using the Manim Community Edition library"},{"role":"user","content":"Write example code to produce a picture of a vector arrow"},{"role":"assistant","content":"from manim import *\n\n  class VectorArrow(Scene):\n     def construct(self):\n         dot = Dot(ORIGIN)\n         arrow = Arrow(ORIGIN, [2, 2, 0], buff=0)\n         numberplane = NumberPlane()\n         origin_text = Text('(0, 0)').next_to(dot, DOWN)\n         tip_text = Text('(2, 2)').next_to(arrow.get_end(), RIGHT)\n         self.add(numberplane, dot, arrow, origin_text, tip_text)"}]}
{"messages":[{"role":"system","content":"You are a python programmer that specializes in writing animation code using the Manim Community Edition library"},{"role":"user","content":"Write example code to produce a picture of a square filled with gradient color"},{"role":"assistant","content":"from manim import *\n\n  class GradientImageFromArray(Scene):\n     def construct(self):\n         n = 256\n         imageArray = np.uint8(             [[i * 256 / n for i in range(0, n)] for _ in range(0, n)]         )\n         image = ImageMobject(imageArray).scale(2)\n         image.background_rectangle = SurroundingRectangle(image, GREEN)\n         self.add(image, image.background_rectangle)"}]}
{"messages":[{"role":"system","content":"You are a python programmer that specializes in writing animation code using the Manim Community Edition library"},{"role":"user","content":"Write example code to produce a video showing the boolean operations of two sets"},{"role":"assistant","content":"from manim import *\n\n  class BooleanOperations(Scene):\n     def construct(self):\n         ellipse1 = Ellipse(\n             width=4.0, height=5.0, fill_opacity=0.5, color=BLUE, stroke_width=10\n         ).move_to(LEFT)\n         ellipse2 = ellipse1.copy().set_color(color=RED).move_to(RIGHT)\n         bool_ops_text = MarkupText('<u>Boolean\n Operation</u>').next_to(ellipse1, UP * 3)\n         ellipse_group = Group(bool_ops_text, ellipse1, ellipse2).move_to(LEFT * 3)\n         self.play(FadeIn(ellipse_group))\n\n          i = Intersection(ellipse1, ellipse2, color=GREEN, fill_opacity=0.5)\n         self.play(i.animate.scale(0.25).move_to(RIGHT * 5 + UP * 2.5))\n         intersection_text = Text('Intersection', font_size=23).next_to(i, UP)\n         self.play(FadeIn(intersection_text))\n\n          u = Union(ellipse1, ellipse2, color=ORANGE, fill_opacity=0.5)\n         union_text = Text('Union', font_size=23)\n         self.play(u.animate.scale(0.3).next_to(i, DOWN, buff=union_text.height * 3))\n         union_text.next_to(u, UP)\n         self.play(FadeIn(union_text))\n\n          e = Exclusion(ellipse1, ellipse2, color=YELLOW, fill_opacity=0.5)\n         exclusion_text = Text('Exclusion', font_size=23)\n         self.play(e.animate.scale(0.3).next_to(u, DOWN, buff=exclusion_text.height * 3.5))\n         exclusion_text.next_to(e, UP)\n         self.play(FadeIn(exclusion_text))\n\n          d = Difference(ellipse1, ellipse2, color=PINK, fill_opacity=0.5)\n         difference_text = Text('Difference', font_size=23)\n         self.play(d.animate.scale(0.3).next_to(u, LEFT, buff=difference_text.height * 3.5))\n         difference_text.next_to(d, UP)\n         self.play(FadeIn(difference_text))"}]}
{"messages":[{"role":"system","content":"You are a python programmer that specializes in writing animation code using the Manim Community Edition library"},{"role":"user","content":"Write example code to produce a video showing a point moving on shapes"},{"role":"assistant","content":"from manim import *\n\n  class PointMovingOnShapes(Scene):\n     def construct(self):\n         circle = Circle(radius=1, color=BLUE)\n         dot = Dot()\n         dot2 = dot.copy().shift(RIGHT)\n         self.add(dot)\n\n          line = Line([3, 0, 0], [5, 0, 0])\n         self.add(line)\n\n          self.play(GrowFromCenter(circle))\n         self.play(Transform(dot, dot2))\n         self.play(MoveAlongPath(dot, circle), run_time=2, rate_func=linear)\n         self.play(Rotating(dot, about_point=[2, 0, 0]), run_time=1.5)\n         self.wait()"}]}
{"messages":[{"role":"system","content":"You are a python programmer that specializes in writing animation code using the Manim Community Edition library"},{"role":"user","content":"Write example code to produce a video showing a square changing color and moving around"},{"role":"assistant","content":"from manim import *\n\n  class MovingAround(Scene):\n     def construct(self):\n         square = Square(color=BLUE, fill_opacity=1)\n\n          self.play(square.animate.shift(LEFT))\n         self.play(square.animate.set_fill(ORANGE))\n         self.play(square.animate.scale(0.3))\n         self.play(square.animate.rotate(0.4))"}]}
{"messages":[{"role":"system","content":"You are a python programmer that specializes in writing animation code using the Manim Community Edition library"},{"role":"user","content":"Write example code to produce a video showing a moving angle"},{"role":"assistant","content":"from manim import *\n\n  class MovingAngle(Scene):\n     def construct(self):\n         rotation_center = LEFT\n\n          theta_tracker = ValueTracker(110)\n         line1 = Line(LEFT, RIGHT)\n         line_moving = Line(LEFT, RIGHT)\n         line_ref = line_moving.copy()\n         line_moving.rotate(\n             theta_tracker.get_value() * DEGREES, about_point=rotation_center\n         )\n         a = Angle(line1, line_moving, radius=0.5, other_angle=False)\n         tex = MathTex(r'\theta').move_to(\n             Angle(\n                 line1, line_moving, radius=0.5 + 3 * SMALL_BUFF, other_angle=False\n             ).point_from_proportion(0.5)\n         )\n\n          self.add(line1, line_moving, a, tex)\n         self.wait()\n\n          line_moving.add_updater(\n             lambda x: x.become(line_ref.copy()).rotate(\n                 theta_tracker.get_value() * DEGREES, about_point=rotation_center\n             )\n         )\n\n          a.add_updater(\n             lambda x: x.become(Angle(line1, line_moving, radius=0.5, other_angle=False))\n         )\n         tex.add_updater(\n             lambda x: x.move_to(\n                 Angle(\n                     line1, line_moving, radius=0.5 + 3 * SMALL_BUFF, other_angle=False\n                 ).point_from_proportion(0.5)\n             )\n         )\n\n          self.play(theta_tracker.animate.set_value(40))\n         self.play(theta_tracker.animate.increment_value(140))\n         self.play(tex.animate.set_color(RED), run_time=0.5)\n         self.play(theta_tracker.animate.set_value(350))"}]}
{"messages":[{"role":"system","content":"You are a python programmer that specializes in writing animation code using the Manim Community Edition library"},{"role":"user","content":"Write example code to produce a video showing moving dots with a line connecting them"},{"role":"assistant","content":"from manim import *\n\n  class MovingDots(Scene):\n     def construct(self):\n         d1,d2=Dot(color=BLUE),Dot(color=GREEN)\n         dg=VGroup(d1,d2).arrange(RIGHT,buff=1)\n         l1=Line(d1.get_center(),d2.get_center()).set_color(RED)\n         x=ValueTracker(0)\n         y=ValueTracker(0)\n         d1.add_updater(lambda z: z.set_x(x.get_value()))\n         d2.add_updater(lambda z: z.set_y(y.get_value()))\n         l1.add_updater(lambda z: z.become(Line(d1.get_center(),d2.get_center())))\n         self.add(d1,d2,l1)\n         self.play(x.animate.set_value(5))\n         self.play(y.animate.set_value(4))\n         self.wait()"}]}
{"messages":[{"role":"system","content":"You are a python programmer that specializes in writing animation code using the Manim Community Edition library"},{"role":"user","content":"Write example code to produce a video showing a group of dots moving to a destination"},{"role":"assistant","content":"from manim import *\n\n  class MovingGroupToDestination(Scene):\n     def construct(self):\n         group = VGroup(Dot(LEFT), Dot(ORIGIN), Dot(RIGHT, color=RED), Dot(2 * RIGHT)).scale(1.4)\n         dest = Dot([4, 3, 0], color=YELLOW)\n         self.add(group, dest)\n         self.play(group.animate.shift(dest.get_center() - group[2].get_center()))\n         self.wait(0.5)"}]}
{"messages":[{"role":"system","content":"You are a python programmer that specializes in writing animation code using the Manim Community Edition library"},{"role":"user","content":"Write example code to produce a video showing a moving frame box around the product rule formula"},{"role":"assistant","content":"from manim import *\n\n  class MovingFrameBox(Scene):\n     def construct(self):\n         text=MathTex(\n             '\\frac{d}{dx}f(x)g(x)=','f(x)\\frac{d}{dx}g(x)','+',\n             'g(x)\\frac{d}{dx}f(x)'\n         )\n         self.play(Write(text))\n         framebox1 = SurroundingRectangle(text[1], buff = .1)\n         framebox2 = SurroundingRectangle(text[3], buff = .1)\n         self.play(\n             Create(framebox1),\n         )\n         self.wait()\n         self.play(\n             ReplacementTransform(framebox1,framebox2),\n         )\n         self.wait()"}]}
{"messages":[{"role":"system","content":"You are a python programmer that specializes in writing animation code using the Manim Community Edition library"},{"role":"user","content":"Write example code to produce a video showing a line rotating anticlockwise and then clockwise about the end of another line"},{"role":"assistant","content":"from manim import *\n\n  class RotationUpdater(Scene):\n     def construct(self):\n         def updater_forth(mobj, dt):\n             mobj.rotate_about_origin(dt)\n         def updater_back(mobj, dt):\n             mobj.rotate_about_origin(-dt)\n         line_reference = Line(ORIGIN, LEFT).set_color(WHITE)\n         line_moving = Line(ORIGIN, LEFT).set_color(YELLOW)\n         line_moving.add_updater(updater_forth)\n         self.add(line_reference, line_moving)\n         self.wait(2)\n         line_moving.remove_updater(updater_forth)\n         line_moving.add_updater(updater_back)\n         self.wait(2)\n         line_moving.remove_updater(updater_back)\n         self.wait(0.5)"}]}
{"messages":[{"role":"system","content":"You are a python programmer that specializes in writing animation code using the Manim Community Edition library"},{"role":"user","content":"Write example code to produce a video showing a point with a trace moving around"},{"role":"assistant","content":"from manim import *\n\n  class PointWithTrace(Scene):\n     def construct(self):\n         path = VMobject()\n         dot = Dot()\n         path.set_points_as_corners([dot.get_center(), dot.get_center()])\n         def update_path(path):\n             previous_path = path.copy()\n             previous_path.add_points_as_corners([dot.get_center()])\n             path.become(previous_path)\n         path.add_updater(update_path)\n         self.add(path, dot)\n         self.play(Rotating(dot, radians=PI, about_point=RIGHT, run_time=2))\n         self.wait()\n         self.play(dot.animate.shift(UP))\n         self.play(dot.animate.shift(LEFT))\n         self.wait()"}]}
{"messages":[{"role":"system","content":"You are a python programmer that specializes in writing animation code using the Manim Community Edition library"},{"role":"user","content":"Write example code to produce a picture of a sin and cos function plot"},{"role":"assistant","content":"from manim import *\n\n  class SinAndCosFunctionPlot(Scene):\n     def construct(self):\n         axes = Axes(\n             x_range=[-10, 10.3, 1],\n             y_range=[-1.5, 1.5, 1],\n             x_length=10,\n             axis_config={'color': GREEN},\n             x_axis_config={\n                 'numbers_to_include': np.arange(-10, 10.01, 2),\n                 'numbers_with_elongated_ticks': np.arange(-10, 10.01, 2),\n             },\n             tips=False,\n         )\n         axes_labels = axes.get_axis_labels()\n         sin_graph = axes.plot(lambda x: np.sin(x), color=BLUE)\n         cos_graph = axes.plot(lambda x: np.cos(x), color=RED)\n\n          sin_label = axes.get_graph_label(\n             sin_graph, '\\sin(x)', x_val=-10, direction=UP / 2\n         )\n         cos_label = axes.get_graph_label(cos_graph, label='\\cos(x)')\n\n          vert_line = axes.get_vertical_line(\n             axes.i2gp(TAU, cos_graph), color=YELLOW, line_func=Line\n         )\n\n          plot = VGroup(axes, sin_graph, cos_graph, vert_line)\n         labels = VGroup(axes_labels, sin_label, cos_label)\n         self.add(plot, labels)"}]}
{"messages":[{"role":"system","content":"You are a python programmer that specializes in writing animation code using the Manim Community Edition library"},{"role":"user","content":"Write example code to produce a video showing a dot moving along a quadratic function plot to the minimum"},{"role":"assistant","content":"from manim import *\n\n  class ArgMinExample(Scene):\n     def construct(self):\n         ax = Axes(\n             x_range=[0, 10], y_range=[0, 100, 10], axis_config={'include_tip': False}\n         )\n         labels = ax.get_axis_labels(x_label='x', y_label='f(x)')\n\n          t = ValueTracker(0)\n\n          def func(x):\n             return 2 * (x - 5) ** 2\n         graph = ax.plot(func, color=MAROON)\n\n          initial_point = [ax.coords_to_point(t.get_value(), func(t.get_value()))]\n         dot = Dot(point=initial_point)\n\n          dot.add_updater(lambda x: x.move_to(ax.c2p(t.get_value(), func(t.get_value()))))\n         x_space = np.linspace(*ax.x_range[:2],200)\n         minimum_index = func(x_space).argmin()\n\n          self.add(ax, labels, graph, dot)\n         self.play(t.animate.set_value(x_space[minimum_index]))\n         self.wait()"}]}
{"messages":[{"role":"system","content":"You are a python programmer that specializes in writing animation code using the Manim Community Edition library"},{"role":"user","content":"Write example code to produce a picture depicting two quadratic functions and the area between them for a range of x"},{"role":"assistant","content":"from manim import *\n\n  class GraphAreaPlot(Scene):\n     def construct(self):\n         ax = Axes(\n             x_range=[0, 5],\n             y_range=[0, 6],\n             x_axis_config={'numbers_to_include': [2, 3]},\n             tips=False,\n         )\n\n          labels = ax.get_axis_labels()\n\n          curve_1 = ax.plot(lambda x: 4 * x - x ** 2, x_range=[0, 4], color=BLUE_C)\n         curve_2 = ax.plot(\n             lambda x: 0.8 * x ** 2 - 3 * x + 4,\n             x_range=[0, 4],\n             color=GREEN_B,\n         )\n\n          line_1 = ax.get_vertical_line(ax.input_to_graph_point(2, curve_1), color=YELLOW)\n         line_2 = ax.get_vertical_line(ax.i2gp(3, curve_1), color=YELLOW)\n\n          riemann_area = ax.get_riemann_rectangles(curve_1, x_range=[0.3, 0.6], dx=0.03, color=BLUE, fill_opacity=0.5)\n         area = ax.get_area(curve_2, [2, 3], bounded_graph=curve_1, color=GREY, opacity=0.5)\n\n          self.add(ax, labels, curve_1, curve_2, line_1, line_2, riemann_area, area)"}]}